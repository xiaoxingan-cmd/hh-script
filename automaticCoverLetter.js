const blueResponseButton = 'a[data-qa="vacancy-serp__vacancy_response"]';
const addCoverLetterButtonPrimary = 'button[data-qa="vacancy-response-letter-toggle"]';
const submitButtonPrimary = 'button[data-qa="vacancy-response-letter-submit"]';
const submitButtonForced = 'button[data-qa="vacancy-response-submit-popup"]';
const acceptRelocationWarningButton = 'button[data-qa="relocation-warning-confirm"]';
const refuseDirectResposeButton = 'button[data-qa="vacancy-response-link-advertising-cancel"]';

const vacancyContainer = 'div[data-qa*="vacancy-serp__vacancy"]';
const vacancyTitleSelector = 'h2[data-qa="bloko-header-2"]';
const vacancyCompanySelector = 'span[data-qa="vacancy-serp__vacancy-employer-text"]';

const textareaCoverLetterPrimary = 'textarea[name="text"]';
const textareaCoverLetterForced = 'textarea[data-qa="vacancy-response-popup-form-letter-input"]';

const titleToFindAfterRedirect = '[data-qa="title-description"]';
const waitForRedirectTimeout = 2500;
const waitAfterRedirectByHistoryTimeout = 1000;

const waitAfterParsingButtons = 5500;
const waitToScrollButton = 800;
const waitAfterButtonHasBeenClicked = 5500;

const isVacancyAlreadyChecked = 'div[data-qa="form-helper-error"]';

const coverLetterText = `
–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ. 
–ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –µ—â—ë –∞–∫—Ç—É–∞–ª—å–Ω–æ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ—Ä–µ–∑ —á–∞—Ç –∏–ª–∏ Telegram: [your_telegram]
`;

function getProcessedVacancies() {
    const processedVacancies = localStorage.getItem("processedVacancies");
    return processedVacancies ? JSON.parse(processedVacancies) : [];
}

function saveProcessedVacancy(vacancy) {
    const processedVacancies = getProcessedVacancies();
    processedVacancies.push(vacancy);
    localStorage.setItem("processedVacancies", JSON.stringify(processedVacancies));
}

function isVacancyProcessed(vacancyTitle, companyName) {
    const processedVacancies = getProcessedVacancies();
    return processedVacancies.some(vacancy => vacancy.title === vacancyTitle && vacancy.company === companyName);
}

function waitForResponseInfinite(selector) {
    return new Promise((resolve) => {
        const check = () => {
            const element = document.querySelector(selector);
            if (element) {
                return resolve(element);
            }

            requestAnimationFrame(check);
        };
        check();
    });
}

function waitForResponse(selector, timeout = 1500) {
    return new Promise((resolve) => {
        const start = Date.now();

        const check = () => {
            const element = document.querySelector(selector);
            if (element) {
                return resolve(element);
            }

            if (Date.now() - start > timeout) {
                console.warn(`üî¥ –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ ${timeout} –º—Å: ${selector}`);
                return resolve(null);
            }

            requestAnimationFrame(check);
        };

        check();
    });
}

async function checkRelocationWarning() {
    const relocationConfirmButton = await waitForResponse(acceptRelocationWarningButton);

    if (relocationConfirmButton) {
        console.log("üü° –û–∫–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –ø–µ—Ä–µ–µ–∑–¥–µ –ø–æ—è–≤–∏–ª–æ—Å—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∏ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ");
        relocationConfirmButton.click();
        console.log("üü¢ –ù–∞–∂–∞–ª–∏ '–í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è'");
    } else {
        console.log("üü¢ –û–∫–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –ø–µ—Ä–µ–µ–∑–¥–µ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å");
    }
}

async function checkDirectResponseWarning() {
    const directResponseButton = await waitForResponse(refuseDirectResposeButton);

    if (directResponseButton) {
        console.log("üü° –û–∫–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –ø—Ä—è–º–æ–º –æ—Ç–∫–ª–∏–∫–µ –ø–æ—è–≤–∏–ª–æ—Å—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∏ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ");
        directResponseButton.click();
        console.log("üü¢ –ù–∞–∂–∞–ª–∏ '–û—Ç–º–µ–Ω–∏—Ç—å'");
    } else {
        console.log("üü¢ –û–∫–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –ø—Ä—è–º–æ–º –æ—Ç–∫–ª–∏–∫–µ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å");
    }
}

async function checkIfVacancyAlreadyChecked() {
    const isChecked = await waitForResponse(isVacancyAlreadyChecked);

    if (isChecked) {
        console.log("üîí –í–∞–∫–∞–Ω—Å–∏—é —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏. –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø—Ä–∏–¥–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É!");
        location.reload();
        return true;
    } else {
        console.log("üü¢ –í–∞–∫–∞–Ω—Å–∏—è –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å");
        return false;
    }
}

function setNativeValue(element, value) {
    const lastValue = element.value;
    element.value = value;

    const event = new Event('input', { bubbles: true });

    const tracker = element._valueTracker;
    if (tracker) {
        tracker.setValue(lastValue);
    }

    element.dispatchEvent(event);
}


async function checkForcedCoverLetter(vacancyTitle, companyName) {
    const textarea = await waitForResponse(textareaCoverLetterForced);

    if (textarea) {
        console.log("üü° –ù–∞ —ç–∫—Ä–∞–Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ");

        setNativeValue(textarea, coverLetterText.trim());
        console.log("üü¢ –í—Å—Ç–∞–≤–∏–ª–∏ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ");

        const submitButton = await waitForResponse(submitButtonForced);
        submitButton.click();
        console.log("‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");

        saveProcessedVacancy({ title: vacancyTitle, company: companyName });
        console.log("üü¢ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é...");

        return true;
    } else {
        console.log("üü¢ Pop-up –¥–ª—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –Ω–µ –±—ã–ª –≤—ã–≤–µ–¥–µ–Ω")
        return false;
    }
}

async function checkForRedirect(clickedButton, vacancyTitle, companyName) {
    setTimeout(() => {
        const element = document.querySelector(titleToFindAfterRedirect);
        const rawText = element?.textContent?.trim();
        const normalizedText = rawText?.replace(/\u00A0/g, ' ');
        const isQuestionPage = normalizedText?.includes('–î–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è');

        if (isQuestionPage) {
            console.log("üü° –í–∞–∫–∞–Ω—Å–∏—è —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥...");
            window.history.back();
            handleRedirectProcessing(clickedButton, vacancyTitle, companyName);
        } else {
            console.log("üü¢ –†–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ");
        }
    }, waitForRedirectTimeout);
}

function handleRedirectProcessing(clickedButton, vacancyTitle, companyName) {
    setTimeout(() => {
        saveProcessedVacancy({ title: vacancyTitle, company: companyName });
        console.log("üü¢ –í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è");

    }, waitAfterRedirectByHistoryTimeout);
}

function initCoverLetterAutomation() {
    // localStorage.removeItem('processedVacancies');

    document.body.addEventListener("click", async (event) => {
        const clickedButton = event.target.closest(blueResponseButton);
        if (!clickedButton) {
            return;
        }

        console.log("üü°üî¥üü†üü¢üü£üü§ –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞–∂–∞—Ç–∞! üü°üî¥üü†üü¢üü£üü§");

        const vacancyContainerBlock = clickedButton.closest(vacancyContainer);
        console.log("üü¢ –ü–æ–ª—É—á–∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏:", vacancyContainerBlock);
        if (!vacancyContainerBlock) {
            console.log("üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏, –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–º–µ–Ω–∏–ª–∞—Å—å");
            return;
        }

        const vacancyTitle = vacancyContainerBlock.querySelector(vacancyTitleSelector)?.textContent.trim();
        const companyName = vacancyContainerBlock.querySelector(vacancyCompanySelector)?.textContent.trim();
        console.log("üîç –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:", vacancyTitle, ", –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:", companyName);

        if (!vacancyTitle || !companyName) {
            console.log("üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —É—Å—Ç–∞—Ä–µ–ª–∏");
            return;
        }

        if (isVacancyProcessed(vacancyTitle, companyName)) {
            console.log("üî¥ –≠—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...");
            return;
        }

        console.log("üü° –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞. –û–∂–∏–¥–∞–µ–º –∫–Ω–æ–ø–∫—É '–ü—Ä–∏–ª–æ–∂–∏—Ç—å –ø–∏—Å—å–º–æ'...");

        try {
            console.log("üü° –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç...")
            await checkForRedirect(clickedButton, vacancyTitle, companyName);

            console.log("üü° –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–µ–∑–¥–µ...")
            await checkRelocationWarning();

            console.log("üü° –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é —Å –ø—Ä—è–º—ã–º –æ—Ç–∫–ª–∏–∫–æ–º...")
            await checkDirectResponseWarning();

            console.log("üü° –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è –∏–ª–∏ –Ω–µ—Ç...")
            if (await checkIfVacancyAlreadyChecked()) {

            } else {
                console.log("üü° –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ forced cover letter pop-up...")
                if (await checkForcedCoverLetter(vacancyTitle, companyName)) {

                } else {
                    const attachLetterButton = await waitForResponseInfinite(addCoverLetterButtonPrimary);
                    attachLetterButton.click();
                    console.log("üü¢ –ù–∞–∂–∞–ª–∏ '–ü—Ä–∏–ª–æ–∂–∏—Ç—å –ø–∏—Å—å–º–æ'");

                    const textarea = await waitForResponseInfinite(textareaCoverLetterPrimary);
                    textarea.value = coverLetterText.trim();
                    textarea.dispatchEvent(new Event("input", { bubbles: true }));
                    console.log("üü¢ –í—Å—Ç–∞–≤–∏–ª–∏ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ");

                    const submitButton = await waitForResponseInfinite(submitButtonPrimary);
                    submitButton.click();
                    console.log("‚úÖ –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");

                    saveProcessedVacancy({ title: vacancyTitle, company: companyName });
                    console.log("üü¢ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é...");
                }
            }
        } catch (err) {
            console.warn("üî¥ –û—à–∏–±–∫–∞:", err);
        }
    });
}

function getUnprocessedButtons() {
    const buttons = Array.from(document.querySelectorAll(blueResponseButton));

    return buttons.filter(btn => {
        const vacancyBlock = btn.closest(vacancyContainer);
        const title = vacancyBlock?.querySelector(vacancyTitleSelector)?.textContent?.trim();
        const company = vacancyBlock?.querySelector(vacancyCompanySelector)?.textContent?.trim();
        return title && company && !isVacancyProcessed(title, company);
    });
}

async function processAllVacanciesPeriodically() {
    console.log("üîÑ –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞...");

    for (let i = 0; i < 100; i++) {
        let buttons = getUnprocessedButtons();
        console.log(buttons);

        // await new Promise(res => setTimeout(res, waitAfterParsingButtons));

        buttons[i].scrollIntoView({behavior: "smooth", block: "center"});
        await new Promise(res => setTimeout(res, waitToScrollButton));

        console.log(`üëÜ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é...`);
        buttons[i].click();
        await new Promise(res => setTimeout(res, waitAfterButtonHasBeenClicked));
    }
}

initCoverLetterAutomation();
processAllVacanciesPeriodically();
console.log("üìå –°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ");